// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartClinicalSystem.Infrastructure.Data;

#nullable disable

namespace SmartClinicalSystem.Infrastructure.Migrations
{
    [DbContext(typeof(SmartClinicalSystemDbContext))]
    [Migration("20251030233036_InitialDbMigration")]
    partial class InitialDbMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4f8554d2-cfaa-44b5-90ce-e883c804ae90",
                            ConcurrencyStamp = "4f8554d2-cfaa-44b5-90ce-e883c804ae90",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "656a6079-ec9a-4a98-a484-2d1752156d60",
                            ConcurrencyStamp = "656a6079-ec9a-4a98-a484-2d1752156d60",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f8472c89-f48d-49cc-8517-a81153d47cdd",
                            RoleId = "4f8554d2-cfaa-44b5-90ce-e883c804ae90"
                        },
                        new
                        {
                            UserId = "27d78708-8671-4b05-bd5e-17aa91392224",
                            RoleId = "656a6079-ec9a-4a98-a484-2d1752156d60"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartClinicalSystem.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f8472c89-f48d-49cc-8517-a81153d47cdd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb28312b-6cf2-4f78-a3b5-213eedca60d4",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@USER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEICOOOMUaoaDbsye5I7dtoN4IARfLfcZptUMMIOl0lgpTA8WMDMWTUayFhzmX8TMjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95822bb2-6318-4ef2-b83c-776a0c8eaa62",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "27d78708-8671-4b05-bd5e-17aa91392224",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f759cf48-0439-447f-a708-76d299203917",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELTxtT6aUTh0qfD+giXsR1pdad9cQ3xEAr7qDcaZLSeMfwBPc9M+33a2mU6gdk0Rrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5a75b1a-229a-4de1-9153-2d093ee510e6",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("SmartClinicalSystem.Infrastructure.Data.Models.Medicine", b =>
                {
                    b.Property<string>("MedicineId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AiSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Contraindications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DosageForm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenericName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAiUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Precautions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SideEffects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Strength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MedicineId");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            MedicineId = "1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p",
                            Category = 1,
                            CreatedAt = new DateTime(2025, 10, 30, 23, 30, 36, 209, DateTimeKind.Utc).AddTicks(4906),
                            DosageForm = "Tablet",
                            GenericName = "Paracetamol",
                            IsDeleted = false,
                            Manufacturer = "PharmaCorp",
                            Price = 2.5m,
                            StockQuantity = 100,
                            Strength = "500mg"
                        },
                        new
                        {
                            MedicineId = "2b3c4d5e-6f7g-8h9i-0j1k-2l3m4n5o6p7q",
                            Category = 1,
                            CreatedAt = new DateTime(2025, 10, 30, 23, 30, 36, 209, DateTimeKind.Utc).AddTicks(4918),
                            DosageForm = "Capsule",
                            GenericName = "Ibuprofen",
                            IsDeleted = false,
                            Manufacturer = "HealthMeds",
                            Price = 3.0m,
                            StockQuantity = 200,
                            Strength = "200mg"
                        },
                        new
                        {
                            MedicineId = "3c4d5e6f-7g8h-9i0j-1k2l-3m4n5o6p7q8r",
                            Category = 2,
                            CreatedAt = new DateTime(2025, 10, 30, 23, 30, 36, 209, DateTimeKind.Utc).AddTicks(4923),
                            DosageForm = "Capsule",
                            GenericName = "Amoxicillin",
                            IsDeleted = false,
                            Manufacturer = "MediLife",
                            Price = 5.0m,
                            StockQuantity = 150,
                            Strength = "250mg"
                        },
                        new
                        {
                            MedicineId = "4d5e6f7g-8h9i-0j1k-2l3m-4n5o6p7q8r9s",
                            Category = 3,
                            CreatedAt = new DateTime(2025, 10, 30, 23, 30, 36, 209, DateTimeKind.Utc).AddTicks(4927),
                            DosageForm = "Tablet",
                            GenericName = "Acyclovir",
                            IsDeleted = false,
                            Manufacturer = "ViralPharma",
                            Price = 8.0m,
                            StockQuantity = 50,
                            Strength = "400mg"
                        },
                        new
                        {
                            MedicineId = "5e6f7g8h-9i0j-1k2l-3m4n-5o6p7q8r9s0t",
                            Category = 4,
                            CreatedAt = new DateTime(2025, 10, 30, 23, 30, 36, 209, DateTimeKind.Utc).AddTicks(4930),
                            DosageForm = "Capsule",
                            GenericName = "Fluconazole",
                            IsDeleted = false,
                            Manufacturer = "FungalCare",
                            Price = 6.0m,
                            StockQuantity = 75,
                            Strength = "150mg"
                        },
                        new
                        {
                            MedicineId = "6f7g8h9i-0j1k-2l3m-4n5o-6p7q8r9s0t1u",
                            Category = 7,
                            CreatedAt = new DateTime(2025, 10, 30, 23, 30, 36, 209, DateTimeKind.Utc).AddTicks(4950),
                            DosageForm = "Tablet",
                            GenericName = "Metformin",
                            IsDeleted = false,
                            Manufacturer = "DiabetesCare",
                            Price = 4.0m,
                            StockQuantity = 300,
                            Strength = "500mg"
                        },
                        new
                        {
                            MedicineId = "7g8h9i0j-1k2l-3m4n-5o6p-7q8r9s0t1u2v",
                            Category = 6,
                            CreatedAt = new DateTime(2025, 10, 30, 23, 30, 36, 209, DateTimeKind.Utc).AddTicks(4956),
                            DosageForm = "Tablet",
                            GenericName = "Losartan",
                            IsDeleted = false,
                            Manufacturer = "HeartHealth",
                            Price = 3.5m,
                            StockQuantity = 250,
                            Strength = "50mg"
                        },
                        new
                        {
                            MedicineId = "8h9i0j1k-2l3m-4n5o-6p7q-8r9s0t1u2v3w",
                            Category = 9,
                            CreatedAt = new DateTime(2025, 10, 30, 23, 30, 36, 209, DateTimeKind.Utc).AddTicks(4960),
                            DosageForm = "Capsule",
                            GenericName = "Omeprazole",
                            IsDeleted = false,
                            Manufacturer = "DigestiveCare",
                            Price = 2.0m,
                            StockQuantity = 400,
                            Strength = "20mg"
                        },
                        new
                        {
                            MedicineId = "9i0j1k2l-3m4n-5o6p-7q8r-9s0t1u2v3w4x",
                            Category = 10,
                            CreatedAt = new DateTime(2025, 10, 30, 23, 30, 36, 209, DateTimeKind.Utc).AddTicks(4964),
                            DosageForm = "Inhaler",
                            GenericName = "Salbutamol",
                            IsDeleted = false,
                            Manufacturer = "BreathEasy",
                            Price = 10.0m,
                            StockQuantity = 120,
                            Strength = "100mcg"
                        },
                        new
                        {
                            MedicineId = "0j1k2l3m-4n5o-6p7q-8r9s-0t1u2v3w4x5y",
                            Category = 11,
                            CreatedAt = new DateTime(2025, 10, 30, 23, 30, 36, 209, DateTimeKind.Utc).AddTicks(4969),
                            DosageForm = "Tablet",
                            GenericName = "Cetirizine",
                            IsDeleted = false,
                            Manufacturer = "AllergyRelief",
                            Price = 1.5m,
                            StockQuantity = 500,
                            Strength = "10mg"
                        });
                });

            modelBuilder.Entity("SmartClinicalSystem.Infrastructure.Data.Models.PromptTemplate", b =>
                {
                    b.Property<string>("PromptTemplateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PromptTemplateId");

                    b.ToTable("PromptTemplates");

                    b.HasData(
                        new
                        {
                            PromptTemplateId = "c9b42596-ebb7-4460-a4fd-18feba292546",
                            Content = "    You are a responsible and helpful AI medical assistant for a Smart Clinical System.\r\n    Your role:\r\n    - Analyze the user's symptoms.\r\n    - Recommend the most appropriate medicines ONLY from the provided list (with their IDs).\r\n    - Provide a short and friendly advice section for the patient.\r\n\r\n    Follow these rules:\r\n    1. Never invent new medicines or diseases.\r\n    2. Choose only from the provided list.\r\n    3. Always respond **strictly in JSON** format using this structure:\r\n\r\n    {\r\n      \"possibleConditions\": \"string — short description of likely common conditions\",\r\n      \"recommendedMedicineIds\": [\"9i0j1k2l-3m4n-5o6p-7q8r-9s0t1u2v3w4x\", \"0j1k2l3m-4n5o-6p7q-8r9s-0t1u2v3w4x5y\"],\r\n      \"advice\": \"string — short patient-friendly advice\"\r\n    }\r\n\r\n    Example response:\r\n\r\n    {\r\n      \"possibleConditions\": \"Common cold or influenza\",\r\n      \"recommendedMedicineIds\": [\"9i0j1k2l-3m4n-5o6p-7q8r-9s0t1u2v3w4x\", \"0j1k2l3m-4n5o-6p7q-8r9s-0t1u2v3w4x5y\"],\r\n      \"advice\": \"Stay hydrated, rest, and take paracetamol for fever. Consult a doctor if symptoms persist more than 3 days.\"\r\n    }\r\n\r\n    Do not include any text, explanation, or markdown outside the JSON block.",
                            CreatedAt = new DateTime(2025, 10, 31, 1, 30, 36, 297, DateTimeKind.Local).AddTicks(9077),
                            Description = "Analyzes user symptoms and recommends possible conditions and medicines from the available list.",
                            IsDeleted = false,
                            Name = "Default Diagnose Prompt",
                            Type = 1
                        });
                });

            modelBuilder.Entity("SmartClinicalSystem.Infrastructure.Data.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Revoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmartClinicalSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmartClinicalSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartClinicalSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmartClinicalSystem.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartClinicalSystem.Infrastructure.Data.Models.RefreshToken", b =>
                {
                    b.HasOne("SmartClinicalSystem.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
